apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-folder-permissions
  namespace: monitoring
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
  labels:
    app.kubernetes.io/name: grafana-folder-permissions
    app.kubernetes.io/part-of: bookwork-observability
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: set-permissions
        image: curlimages/curl:8.4.0
        command: ["/bin/sh"]
        args:
          - -c
          - |
            set -e
            
            # Install jq
            apk add --no-cache jq
            
            # Wait for Grafana to be ready
            echo "Waiting for Grafana to be ready..."
            for i in {1..30}; do
              if curl -s -f http://grafana:3000/api/health >/dev/null 2>&1; then
                echo "Grafana is ready"
                break
              fi
              echo "Waiting for Grafana... ($i/30)"
              sleep 10
            done
            
            # Set folder permissions
            GRAFANA_URL="http://grafana:3000"
            FOLDER_NAME="Bookwork Dashboards"
            
            echo "Checking for '$FOLDER_NAME' folder..."
            
            # Get folder UID
            FOLDER_UID=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" "$GRAFANA_URL/api/folders" | \
                jq -r ".[] | select(.title == \"$FOLDER_NAME\") | .uid")
            
            if [ -z "$FOLDER_UID" ] || [ "$FOLDER_UID" = "null" ]; then
                echo "Error: Folder '$FOLDER_NAME' not found"
                exit 1
            fi
            
            echo "Found folder '$FOLDER_NAME' with UID: $FOLDER_UID"
            
            # Check current permissions
            echo "Checking current permissions..."
            CURRENT_PERMS=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                "$GRAFANA_URL/api/folders/$FOLDER_UID/permissions")
            
            # Check if Viewer role already has permissions
            HAS_VIEWER_PERM=$(echo "$CURRENT_PERMS" | jq -r '.[] | select(.role == "Viewer") | .permission')
            
            if [ "$HAS_VIEWER_PERM" = "1" ]; then
                echo "Viewer permissions already set correctly"
                exit 0
            fi
            
            echo "Setting Viewer permissions on folder..."
            
            # Set Viewer role permissions (permission 1 = View)
            RESPONSE=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                -X POST \
                -H "Content-Type: application/json" \
                -d '{"items":[{"role":"Viewer","permission":1}]}' \
                "$GRAFANA_URL/api/folders/$FOLDER_UID/permissions")
            
            if echo "$RESPONSE" | grep -q "Folder permissions updated"; then
                echo "✅ Successfully set Viewer permissions on '$FOLDER_NAME' folder"
                echo "GitHub OAuth users with Viewer role can now access all dashboards"
            else
                echo "❌ Failed to set permissions: $RESPONSE"
                exit 1
            fi
        env:
        - name: GRAFANA_ADMIN_USER
          value: "admin"
        - name: GRAFANA_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin-secret
              key: admin-password
  backoffLimit: 3
