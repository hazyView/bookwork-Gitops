apiVersion: batch/v1
kind: CronJob
metadata:
  name: grafana-team-sync-cron
  namespace: monitoring
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  labels:
    app.kubernetes.io/name: grafana-team-sync-cron
    app.kubernetes.io/part-of: bookwork-observability
spec:
  schedule: "0 9 * * *"  # Once daily at 9 AM
  # Alternative schedules:
  # "0 9 * * *"     # Once daily at 9 AM
  # "0 */12 * * *"  # Every 12 hours
  # "*/5 * * * *"   # Every 5 minutes (current - too frequent)
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          securityContext:
            runAsUser: 0  # Run as root to allow package installation
          containers:
          - name: team-sync
            image: alpine:3.18
            command: ["/bin/sh"]
            args:
              - -c
              - |
                set -e
                
                # Install required packages
                apk add --no-cache curl jq
                
                GRAFANA_URL="http://grafana:3000"
                TEAM_NAME="Bookwork-Viewers"
                
                echo "Starting periodic team synchronization..."
                
                # Get team ID by name
                echo "Looking for team: $TEAM_NAME"
                TEAM_ID=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                    "$GRAFANA_URL/api/teams/search?name=$TEAM_NAME" | \
                    jq -r '.teams[0].id // empty')
                
                if [ -z "$TEAM_ID" ]; then
                    echo "Team '$TEAM_NAME' not found, creating it..."
                    
                    # Create the team
                    TEAM_RESPONSE=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                        -X POST \
                        -H "Content-Type: application/json" \
                        -d "{\"name\":\"$TEAM_NAME\",\"email\":\"bookwork-team@bookwork-demo.com\"}" \
                        "$GRAFANA_URL/api/teams")
                    
                    TEAM_ID=$(echo "$TEAM_RESPONSE" | jq -r '.teamId')
                    
                    if [ -n "$TEAM_ID" ] && [ "$TEAM_ID" != "null" ]; then
                        echo "✅ Created team '$TEAM_NAME' with ID: $TEAM_ID"
                    else
                        echo "❌ Failed to create team: $TEAM_RESPONSE"
                        exit 1
                    fi
                else
                    echo "Found team '$TEAM_NAME' with ID: $TEAM_ID"
                fi
                
                # Get all GitHub OAuth users (non-admin users with GitHub auth labels)
                echo "Getting GitHub OAuth users..."
                GITHUB_USERS=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                    "$GRAFANA_URL/api/users" | \
                    jq -r '.[] | select(.isAdmin == false and (.authLabels[]? == "GitHub")) | .login')
                
                if [ -z "$GITHUB_USERS" ]; then
                    echo "No GitHub OAuth users found"
                    exit 0
                fi
                
                echo "Found GitHub OAuth users: $GITHUB_USERS"
                
                # Get current team members
                CURRENT_MEMBERS=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                    "$GRAFANA_URL/api/teams/$TEAM_ID/members" | \
                    jq -r '.[].login')
                
                echo "Current team members: $CURRENT_MEMBERS"
                
                # Add GitHub users to team if not already members
                for user in $GITHUB_USERS; do
                    if echo "$CURRENT_MEMBERS" | grep -q "^$user$"; then
                        echo "User '$user' is already a team member"
                    else
                        echo "Adding user '$user' to team..."
                        
                        # Get user ID
                        USER_ID=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                            "$GRAFANA_URL/api/users/lookup?loginOrEmail=$user" | \
                            jq -r '.id')
                        
                        if [ -n "$USER_ID" ] && [ "$USER_ID" != "null" ]; then
                            RESPONSE=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                                -X POST \
                                -H "Content-Type: application/json" \
                                -d "{\"userId\":$USER_ID}" \
                                "$GRAFANA_URL/api/teams/$TEAM_ID/members")
                            
                            if echo "$RESPONSE" | grep -q '"message":"Member added to team"'; then
                                echo "✅ Successfully added '$user' to team"
                            else
                                echo "❌ Failed to add '$user' to team: $RESPONSE"
                            fi
                        else
                            echo "❌ Could not find user ID for '$user'"
                        fi
                    fi
                done
                
                echo "Periodic team synchronization completed"
            env:
            - name: GRAFANA_ADMIN_USER
              value: "admin"
            - name: GRAFANA_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-secret
                  key: admin-password
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
