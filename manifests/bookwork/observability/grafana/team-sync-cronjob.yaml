apiVersion: batch/v1
kind: CronJob
metadata:
  name: grafana-team-sync-cron
  namespace: monitoring
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  labels:
    app.kubernetes.io/name: grafana-team-sync-cron
    app.kubernetes.io/part-of: bookwork-observability
spec:
  schedule: "0 9 * * *"  # Once daily at 9 AM
  # Alternative schedules:
  # "0 9 * * *"     # Once daily at 9 AM
  # "0 */12 * * *"  # Every 12 hours
  # "*/5 * * * *"   # Every 5 minutes (current - too frequent)
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          restartPolicy: OnFailure
          containers:
          - name: team-sync
            image: python:3.11-slim
            securityContext:
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              capabilities:
                drop:
                - ALL
              seccompProfile:
                type: RuntimeDefault
            command: ["/bin/bash"]
            args:
              - -c
              - |
                export HOME=/home/nonroot
                mkdir -p $HOME/.local
                pip install --user requests
                export PYTHONPATH=$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH
                python3 -c "
                import os
                import requests
                import json
                import time
                
                grafana_url = 'http://grafana:3000'
                admin_user = os.environ['GRAFANA_ADMIN_USER']
                admin_pass = os.environ['GRAFANA_ADMIN_PASSWORD']
                auth = (admin_user, admin_pass)
                
                print('Waiting for Grafana to be ready...')
                for i in range(30):
                    try:
                        requests.get(f'{grafana_url}/api/health')
                        break
                    except:
                        print(f'Waiting for Grafana... ({i+1}/30)')
                        time.sleep(10)
                else:
                    print('Grafana not ready')
                    exit(1)
                
                print('Waiting for provisioning to complete...')
                time.sleep(30)
                
                print('Starting periodic team synchronization...')
                
                team_name = 'Bookwork-Viewers'
                response = requests.get(f'{grafana_url}/api/teams/search?name={team_name}', auth=auth)
                response.raise_for_status()
                data = response.json()
                team_id = data.get('teams', [{}])[0].get('id')
                
                if not team_id:
                    print(f\"Team '{team_name}' not found, creating it...\")
                    response = requests.post(f'{grafana_url}/api/teams', auth=auth, json={'name': team_name, 'email': 'bookwork-team@bookwork-demo.com'})
                    response.raise_for_status()
                    data = response.json()
                    team_id = data.get('teamId')
                    if team_id:
                        print(f\"Created team '{team_name}' with ID: {team_id}\")
                    else:
                        print(f\"Failed to create team: {data}\")
                        exit(1)
                else:
                    print(f\"Found team '{team_name}' with ID: {team_id}\")
                
                response = requests.get(f'{grafana_url}/api/users', auth=auth)
                response.raise_for_status()
                users = response.json()
                github_users = [u['login'] for u in users if not u.get('isAdmin') and 'GitHub' in (u.get('authLabels') or [])]
                
                if not github_users:
                    print('No GitHub OAuth users found')
                    exit(0)
                
                print(f'Found GitHub OAuth users: {github_users}')
                
                response = requests.get(f'{grafana_url}/api/teams/{team_id}/members', auth=auth)
                response.raise_for_status()
                current_members = [m['login'] for m in response.json()]
                
                print(f'Current team members: {current_members}')
                
                for user in github_users:
                    if user in current_members:
                        print(f\"User '{user}' is already a team member\")
                        continue
                    print(f\"Adding user '{user}' to team...\")
                    response = requests.get(f'{grafana_url}/api/users/lookup?loginOrEmail={user}', auth=auth)
                    response.raise_for_status()
                    data = response.json()
                    user_id = data.get('id')
                    if user_id:
                        response = requests.post(f'{grafana_url}/api/teams/{team_id}/members', auth=auth, json={'userId': user_id})
                        response.raise_for_status()
                        data = response.json()
                        if 'Member added to team' in data.get('message', ''):
                            print(f\"Successfully added '{user}' to team\")
                        else:
                            print(f\"Failed to add '{user}' to team: {data}\")
                    else:
                        print(f\"Could not find user ID for '{user}'\")
                
                print('Periodic team synchronization completed')
                "
            env:
            - name: GRAFANA_ADMIN_USER
              value: "admin"
            - name: GRAFANA_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-secret
                  key: admin-password
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
