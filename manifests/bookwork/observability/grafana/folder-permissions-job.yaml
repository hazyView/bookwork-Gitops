apiVersion: batch/v1
kind: CronJob
metadata:
  name: grafana-folder-permissions-cron
  namespace: monitoring
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    # Removed ArgoCD hooks since this is now a recurring CronJob
  labels:
    app.kubernetes.io/name: grafana-folder-permissions-cron
    app.kubernetes.io/part-of: bookwork-observability
spec:
  schedule: "0 2 * * *"  # Run daily at 2:00 AM (low-traffic time)
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid  # Prevent overlapping executions
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: set-permissions
        image: alpine/curl:8.4.0
        command: ["/bin/sh"]
        args:
          - -c
          - |
            set -e
            
            # Wait for Grafana to be ready
            echo "Waiting for Grafana to be ready..."
            for i in {1..30}; do
              if curl -s -f http://grafana:3000/api/health >/dev/null 2>&1; then
                echo "Grafana is ready"
                break
              fi
              echo "Waiting for Grafana... ($i/30)"
              sleep 10
            done
            
            # Wait additional time for provisioning to complete
            echo "Waiting for provisioning to complete..."
            sleep 30
            
            GRAFANA_URL="http://grafana:3000"
            TEAM_NAME="Bookwork-Viewers"
            FOLDER_NAME="Bookwork Dashboards"
            FOLDER_UID="bookwork-dashboards"
            
            echo "Starting team and folder setup..."
            
            # Step 1: Create team if it doesn't exist
            echo "Checking for team: $TEAM_NAME"
            TEAM_ID=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" "$GRAFANA_URL/api/teams" | \
                grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2 2>/dev/null || echo "")
            
            if [ -z "$TEAM_ID" ]; then
                echo "Creating team: $TEAM_NAME"
                TEAM_RESPONSE=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                    -X POST \
                    -H "Content-Type: application/json" \
                    -d "{\"name\":\"$TEAM_NAME\",\"email\":\"\"}" \
                    "$GRAFANA_URL/api/teams")
                
                TEAM_ID=$(echo "$TEAM_RESPONSE" | grep -o '"teamId":[0-9]*' | cut -d':' -f2)
                echo "Created team with ID: $TEAM_ID"
            else
                echo "Team exists with ID: $TEAM_ID"
            fi
            
            # Step 2: Create folder if it doesn't exist
            echo "Checking for folder: $FOLDER_NAME"
            EXISTING_FOLDER=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" "$GRAFANA_URL/api/folders" | \
                grep "$FOLDER_UID" || echo "")
            
            if [ -z "$EXISTING_FOLDER" ]; then
                echo "Creating folder: $FOLDER_NAME"
                FOLDER_RESPONSE=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                    -X POST \
                    -H "Content-Type: application/json" \
                    -d "{\"uid\":\"$FOLDER_UID\",\"title\":\"$FOLDER_NAME\"}" \
                    "$GRAFANA_URL/api/folders")
                echo "Created folder: $FOLDER_RESPONSE"
            else
                echo "Folder already exists"
            fi
            
            # Step 3: Set Viewer role permissions on folder
            echo "Setting Viewer role permissions on folder..."
            VIEWER_RESPONSE=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                -X POST \
                -H "Content-Type: application/json" \
                -d '{"items":[{"role":"Viewer","permission":1}]}' \
                "$GRAFANA_URL/api/folders/$FOLDER_UID/permissions")
            echo "Viewer permissions result: $VIEWER_RESPONSE"
            
            # Step 4: Set team permissions on folder
            echo "Setting team permissions on folder..."
            TEAM_RESPONSE=$(curl -s -u "$GRAFANA_ADMIN_USER:$GRAFANA_ADMIN_PASSWORD" \
                -X POST \
                -H "Content-Type: application/json" \
                -d "{\"teamId\":$TEAM_ID,\"permission\":\"Viewer\"}" \
                "$GRAFANA_URL/api/folders/$FOLDER_UID/permissions")
            echo "Team permissions result: $TEAM_RESPONSE"
            
            echo "âœ… Successfully configured team-based permissions"
            echo "GitHub OAuth users will have access to dashboards through the Viewer role and team membership"
        env:
        - name: GRAFANA_ADMIN_USER
          value: "admin"
        - name: GRAFANA_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin-secret
              key: admin-password
  backoffLimit: 3
